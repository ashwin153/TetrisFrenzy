package com.ashwin.tetris.test;

import android.app.Service;
import android.content.Intent;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.os.Messenger;
import android.widget.Toast;

/*
 * If you need your service to communicate with remote processes, then you can use a 
 * Messenger to provide the interface for your service. This technique allows you to 
 * perform interprocess communication (IPC) without the need to use AIDL.
 * 
 * In this way, there are no "methods" for the client to call on the service. Instead, 
 * the client delivers "messages" (Message objects) that the service receives in its Handler.
 * 
 */
public class ServiceTest_old extends Service {

	private boolean mAllowRebind; // indicates whether onRebind should be used
	private Messenger mMessenger;
	public static final int SHOW_TOAST = 0;
	
	// https://github.com/pocorall/scaloid-apidemos/blob/master/src/main/java/com/example/android/apis/app/MessengerService.java
	
	private class MyHandler extends Handler {
		@Override
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case SHOW_TOAST:
				Toast.makeText(ServiceTest_old.this, "Service Handler Message",
						Toast.LENGTH_SHORT).show();
				break;
			default:
				super.handleMessage(msg);
			}
		}
	}

	@Override
	public void onCreate() {
		mAllowRebind = true;
		mMessenger = new Messenger(new MyHandler());
	}

	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		throw new RuntimeException("You should not start this service");
	}

	/**
	 * Return the IBinder generated by the Messenger which clients will send to
	 * use messages to this service
	 */
	@Override
	public IBinder onBind(Intent intent) {
		Toast.makeText(getApplicationContext(), "Service Binding",
				Toast.LENGTH_SHORT).show();
		return mMessenger.getBinder();
	}

	@Override
	public boolean onUnbind(Intent intent) {
		// All clients have unbound with unbindService()
		Toast.makeText(this, "Service Unbinding", Toast.LENGTH_SHORT).show();
		return mAllowRebind;
	}

	@Override
	public void onRebind(Intent intent) {
		// A client is binding to the service with bindService(),
		// after onUnbind() has already been called
	}

	@Override
	public void onDestroy() {
		Toast.makeText(this, "Service Done", Toast.LENGTH_SHORT).show();
	}

}
